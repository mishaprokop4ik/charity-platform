// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "Kurajj/internal/models"
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositorier is a mock of Repositorier interface.
type MockRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorierMockRecorder
}

// MockRepositorierMockRecorder is the mock recorder for MockRepositorier.
type MockRepositorierMockRecorder struct {
	mock *MockRepositorier
}

// NewMockRepositorier creates a new mock instance.
func NewMockRepositorier(ctrl *gomock.Controller) *MockRepositorier {
	mock := &MockRepositorier{ctrl: ctrl}
	mock.recorder = &MockRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorier) EXPECT() *MockRepositorierMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockRepositorier) CreateAdmin(ctx context.Context, admin models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, admin)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockRepositorierMockRecorder) CreateAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockRepositorier)(nil).CreateAdmin), ctx, admin)
}

// CreateEvent mocks base method.
func (m *MockRepositorier) CreateEvent(ctx context.Context, event *models.HelpEvent) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepositorierMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepositorier)(nil).CreateEvent), ctx, event)
}

// CreateNeed mocks base method.
func (m *MockRepositorier) CreateNeed(ctx context.Context, need models.Need) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNeed", ctx, need)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNeed indicates an expected call of CreateNeed.
func (mr *MockRepositorierMockRecorder) CreateNeed(ctx, need interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNeed", reflect.TypeOf((*MockRepositorier)(nil).CreateNeed), ctx, need)
}

// CreateNotification mocks base method.
func (m *MockRepositorier) CreateNotification(ctx context.Context, notification models.TransactionNotification) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockRepositorierMockRecorder) CreateNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockRepositorier)(nil).CreateNotification), ctx, notification)
}

// CreateProposalEvent mocks base method.
func (m *MockRepositorier) CreateProposalEvent(ctx context.Context, event models.ProposalEvent) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProposalEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProposalEvent indicates an expected call of CreateProposalEvent.
func (mr *MockRepositorierMockRecorder) CreateProposalEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProposalEvent", reflect.TypeOf((*MockRepositorier)(nil).CreateProposalEvent), ctx, event)
}

// CreateTag mocks base method.
func (m *MockRepositorier) CreateTag(ctx context.Context, tag models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockRepositorierMockRecorder) CreateTag(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockRepositorier)(nil).CreateTag), ctx, tag)
}

// CreateTransaction mocks base method.
func (m *MockRepositorier) CreateTransaction(ctx context.Context, transaction models.Transaction) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockRepositorierMockRecorder) CreateTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockRepositorier)(nil).CreateTransaction), ctx, transaction)
}

// CreateUser mocks base method.
func (m *MockRepositorier) CreateUser(ctx context.Context, user models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositorierMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositorier)(nil).CreateUser), ctx, user)
}

// Delete mocks base method.
func (m *MockRepositorier) Delete(ctx context.Context, identifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, identifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositorierMockRecorder) Delete(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositorier)(nil).Delete), ctx, identifier)
}

// DeleteAdmin mocks base method.
func (m *MockRepositorier) DeleteAdmin(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockRepositorierMockRecorder) DeleteAdmin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockRepositorier)(nil).DeleteAdmin), ctx, id)
}

// DeleteAllTagsByEvent mocks base method.
func (m *MockRepositorier) DeleteAllTagsByEvent(ctx context.Context, eventID uint, eventType models.EventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTagsByEvent", ctx, eventID, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllTagsByEvent indicates an expected call of DeleteAllTagsByEvent.
func (mr *MockRepositorierMockRecorder) DeleteAllTagsByEvent(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTagsByEvent", reflect.TypeOf((*MockRepositorier)(nil).DeleteAllTagsByEvent), ctx, eventID, eventType)
}

// DeleteComment mocks base method.
func (m *MockRepositorier) DeleteComment(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockRepositorierMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockRepositorier)(nil).DeleteComment), ctx, id)
}

// DeleteEvent mocks base method.
func (m *MockRepositorier) DeleteEvent(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockRepositorierMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockRepositorier)(nil).DeleteEvent), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockRepositorier) DeleteUser(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositorierMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepositorier)(nil).DeleteUser), ctx, id)
}

// Get mocks base method.
func (m *MockRepositorier) Get(ctx context.Context, identifier string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, identifier)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositorierMockRecorder) Get(ctx, identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositorier)(nil).Get), ctx, identifier)
}

// GetAdminByID mocks base method.
func (m *MockRepositorier) GetAdminByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByID indicates an expected call of GetAdminByID.
func (mr *MockRepositorierMockRecorder) GetAdminByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByID", reflect.TypeOf((*MockRepositorier)(nil).GetAdminByID), ctx, id)
}

// GetAllAdmins mocks base method.
func (m *MockRepositorier) GetAllAdmins(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockRepositorierMockRecorder) GetAllAdmins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockRepositorier)(nil).GetAllAdmins), ctx)
}

// GetAllCommentsInEvent mocks base method.
func (m *MockRepositorier) GetAllCommentsInEvent(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentsInEvent", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentsInEvent indicates an expected call of GetAllCommentsInEvent.
func (mr *MockRepositorierMockRecorder) GetAllCommentsInEvent(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentsInEvent", reflect.TypeOf((*MockRepositorier)(nil).GetAllCommentsInEvent), ctx, eventID, eventType)
}

// GetAllEventTransactions mocks base method.
func (m *MockRepositorier) GetAllEventTransactions(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEventTransactions", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEventTransactions indicates an expected call of GetAllEventTransactions.
func (mr *MockRepositorierMockRecorder) GetAllEventTransactions(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEventTransactions", reflect.TypeOf((*MockRepositorier)(nil).GetAllEventTransactions), ctx, eventID, eventType)
}

// GetByID mocks base method.
func (m *MockRepositorier) GetByID(ctx context.Context, id uint) (models.TransactionNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.TransactionNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositorierMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositorier)(nil).GetByID), ctx, id)
}

// GetByMember mocks base method.
func (m *MockRepositorier) GetByMember(ctx context.Context, userID uint) ([]models.TransactionNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMember", ctx, userID)
	ret0, _ := ret[0].([]models.TransactionNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMember indicates an expected call of GetByMember.
func (mr *MockRepositorierMockRecorder) GetByMember(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMember", reflect.TypeOf((*MockRepositorier)(nil).GetByMember), ctx, userID)
}

// GetByRefreshToken mocks base method.
func (m *MockRepositorier) GetByRefreshToken(ctx context.Context, token string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefreshToken", ctx, token)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefreshToken indicates an expected call of GetByRefreshToken.
func (mr *MockRepositorierMockRecorder) GetByRefreshToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefreshToken", reflect.TypeOf((*MockRepositorier)(nil).GetByRefreshToken), ctx, token)
}

// GetCommentByID mocks base method.
func (m *MockRepositorier) GetCommentByID(ctx context.Context, id uint) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, id)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockRepositorierMockRecorder) GetCommentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockRepositorier)(nil).GetCommentByID), ctx, id)
}

// GetCurrentEventTransactions mocks base method.
func (m *MockRepositorier) GetCurrentEventTransactions(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEventTransactions", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEventTransactions indicates an expected call of GetCurrentEventTransactions.
func (mr *MockRepositorierMockRecorder) GetCurrentEventTransactions(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEventTransactions", reflect.TypeOf((*MockRepositorier)(nil).GetCurrentEventTransactions), ctx, eventID, eventType)
}

// GetEntity mocks base method.
func (m *MockRepositorier) GetEntity(ctx context.Context, email, password string, isAdmin, isDeleted bool) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntity", ctx, email, password, isAdmin, isDeleted)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntity indicates an expected call of GetEntity.
func (mr *MockRepositorierMockRecorder) GetEntity(ctx, email, password, isAdmin, isDeleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntity", reflect.TypeOf((*MockRepositorier)(nil).GetEntity), ctx, email, password, isAdmin, isDeleted)
}

// GetEvent mocks base method.
func (m *MockRepositorier) GetEvent(ctx context.Context, id uint) (models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockRepositorierMockRecorder) GetEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockRepositorier)(nil).GetEvent), ctx, id)
}

// GetEventByID mocks base method.
func (m *MockRepositorier) GetEventByID(ctx context.Context, id models.ID) (models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockRepositorierMockRecorder) GetEventByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockRepositorier)(nil).GetEventByID), ctx, id)
}

// GetEvents mocks base method.
func (m *MockRepositorier) GetEvents(ctx context.Context) ([]models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx)
	ret0, _ := ret[0].([]models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockRepositorierMockRecorder) GetEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockRepositorier)(nil).GetEvents), ctx)
}

// GetHelpEventByTransactionID mocks base method.
func (m *MockRepositorier) GetHelpEventByTransactionID(ctx context.Context, transactionID models.ID) (models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventByTransactionID", ctx, transactionID)
	ret0, _ := ret[0].(models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventByTransactionID indicates an expected call of GetHelpEventByTransactionID.
func (mr *MockRepositorierMockRecorder) GetHelpEventByTransactionID(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventByTransactionID", reflect.TypeOf((*MockRepositorier)(nil).GetHelpEventByTransactionID), ctx, transactionID)
}

// GetHelpEventNeeds mocks base method.
func (m *MockRepositorier) GetHelpEventNeeds(ctx context.Context, eventID models.ID) ([]models.Need, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventNeeds", ctx, eventID)
	ret0, _ := ret[0].([]models.Need)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventNeeds indicates an expected call of GetHelpEventNeeds.
func (mr *MockRepositorierMockRecorder) GetHelpEventNeeds(ctx, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventNeeds", reflect.TypeOf((*MockRepositorier)(nil).GetHelpEventNeeds), ctx, eventID)
}

// GetHelpEventStatistics mocks base method.
func (m *MockRepositorier) GetHelpEventStatistics(ctx context.Context, id uint, from, to time.Time) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventStatistics", ctx, id, from, to)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventStatistics indicates an expected call of GetHelpEventStatistics.
func (mr *MockRepositorierMockRecorder) GetHelpEventStatistics(ctx, id, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventStatistics", reflect.TypeOf((*MockRepositorier)(nil).GetHelpEventStatistics), ctx, id, from, to)
}

// GetHelpEventsWithSearchAndSort mocks base method.
func (m *MockRepositorier) GetHelpEventsWithSearchAndSort(ctx context.Context, searchValues models.HelpSearchInternal) (models.HelpEventPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventsWithSearchAndSort", ctx, searchValues)
	ret0, _ := ret[0].(models.HelpEventPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventsWithSearchAndSort indicates an expected call of GetHelpEventsWithSearchAndSort.
func (mr *MockRepositorierMockRecorder) GetHelpEventsWithSearchAndSort(ctx, searchValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventsWithSearchAndSort", reflect.TypeOf((*MockRepositorier)(nil).GetHelpEventsWithSearchAndSort), ctx, searchValues)
}

// GetProposalEventByTransactionID mocks base method.
func (m *MockRepositorier) GetProposalEventByTransactionID(ctx context.Context, transactionID int) (models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalEventByTransactionID", ctx, transactionID)
	ret0, _ := ret[0].(models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalEventByTransactionID indicates an expected call of GetProposalEventByTransactionID.
func (mr *MockRepositorierMockRecorder) GetProposalEventByTransactionID(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalEventByTransactionID", reflect.TypeOf((*MockRepositorier)(nil).GetProposalEventByTransactionID), ctx, transactionID)
}

// GetProposalEventStatistics mocks base method.
func (m *MockRepositorier) GetProposalEventStatistics(ctx context.Context, id uint, from, to time.Time) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalEventStatistics", ctx, id, from, to)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalEventStatistics indicates an expected call of GetProposalEventStatistics.
func (mr *MockRepositorierMockRecorder) GetProposalEventStatistics(ctx, id, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalEventStatistics", reflect.TypeOf((*MockRepositorier)(nil).GetProposalEventStatistics), ctx, id, from, to)
}

// GetProposalEventsWithSearchAndSort mocks base method.
func (m *MockRepositorier) GetProposalEventsWithSearchAndSort(ctx context.Context, searchValues models.ProposalEventSearchInternal) (models.ProposalEventPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalEventsWithSearchAndSort", ctx, searchValues)
	ret0, _ := ret[0].(models.ProposalEventPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalEventsWithSearchAndSort indicates an expected call of GetProposalEventsWithSearchAndSort.
func (mr *MockRepositorierMockRecorder) GetProposalEventsWithSearchAndSort(ctx, searchValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalEventsWithSearchAndSort", reflect.TypeOf((*MockRepositorier)(nil).GetProposalEventsWithSearchAndSort), ctx, searchValues)
}

// GetTagsByEvent mocks base method.
func (m *MockRepositorier) GetTagsByEvent(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByEvent", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByEvent indicates an expected call of GetTagsByEvent.
func (mr *MockRepositorierMockRecorder) GetTagsByEvent(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByEvent", reflect.TypeOf((*MockRepositorier)(nil).GetTagsByEvent), ctx, eventID, eventType)
}

// GetTransactionByID mocks base method.
func (m *MockRepositorier) GetTransactionByID(ctx context.Context, id uint) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, id)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockRepositorierMockRecorder) GetTransactionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockRepositorier)(nil).GetTransactionByID), ctx, id)
}

// GetTransactionNeeds mocks base method.
func (m *MockRepositorier) GetTransactionNeeds(ctx context.Context, transactionID models.ID) ([]models.Need, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionNeeds", ctx, transactionID)
	ret0, _ := ret[0].([]models.Need)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionNeeds indicates an expected call of GetTransactionNeeds.
func (mr *MockRepositorierMockRecorder) GetTransactionNeeds(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionNeeds", reflect.TypeOf((*MockRepositorier)(nil).GetTransactionNeeds), ctx, transactionID)
}

// GetUserAuthentication mocks base method.
func (m *MockRepositorier) GetUserAuthentication(ctx context.Context, email, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthentication", ctx, email, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthentication indicates an expected call of GetUserAuthentication.
func (mr *MockRepositorierMockRecorder) GetUserAuthentication(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthentication", reflect.TypeOf((*MockRepositorier)(nil).GetUserAuthentication), ctx, email, password)
}

// GetUserHelpEvents mocks base method.
func (m *MockRepositorier) GetUserHelpEvents(ctx context.Context, userID models.ID) ([]models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHelpEvents", ctx, userID)
	ret0, _ := ret[0].([]models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHelpEvents indicates an expected call of GetUserHelpEvents.
func (mr *MockRepositorierMockRecorder) GetUserHelpEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHelpEvents", reflect.TypeOf((*MockRepositorier)(nil).GetUserHelpEvents), ctx, userID)
}

// GetUserInfo mocks base method.
func (m *MockRepositorier) GetUserInfo(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRepositorierMockRecorder) GetUserInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRepositorier)(nil).GetUserInfo), ctx, id)
}

// GetUserProposalEvents mocks base method.
func (m *MockRepositorier) GetUserProposalEvents(ctx context.Context, userID uint) ([]models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProposalEvents", ctx, userID)
	ret0, _ := ret[0].([]models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProposalEvents indicates an expected call of GetUserProposalEvents.
func (mr *MockRepositorierMockRecorder) GetUserProposalEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProposalEvents", reflect.TypeOf((*MockRepositorier)(nil).GetUserProposalEvents), ctx, userID)
}

// IsEmailTaken mocks base method.
func (m *MockRepositorier) IsEmailTaken(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailTaken", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailTaken indicates an expected call of IsEmailTaken.
func (mr *MockRepositorierMockRecorder) IsEmailTaken(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailTaken", reflect.TypeOf((*MockRepositorier)(nil).IsEmailTaken), ctx, email)
}

// ReadNotifications mocks base method.
func (m *MockRepositorier) ReadNotifications(ctx context.Context, ids []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNotifications", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNotifications indicates an expected call of ReadNotifications.
func (mr *MockRepositorierMockRecorder) ReadNotifications(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotifications", reflect.TypeOf((*MockRepositorier)(nil).ReadNotifications), ctx, ids)
}

// SetSession mocks base method.
func (m *MockRepositorier) SetSession(ctx context.Context, userID uint, session models.MemberSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSession", ctx, userID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSession indicates an expected call of SetSession.
func (mr *MockRepositorierMockRecorder) SetSession(ctx, userID, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockRepositorier)(nil).SetSession), ctx, userID, session)
}

// Update mocks base method.
func (m *MockRepositorier) Update(ctx context.Context, newNotification models.TransactionNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, newNotification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositorierMockRecorder) Update(ctx, newNotification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositorier)(nil).Update), ctx, newNotification)
}

// UpdateAdmin mocks base method.
func (m *MockRepositorier) UpdateAdmin(ctx context.Context, admin models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", ctx, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockRepositorierMockRecorder) UpdateAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockRepositorier)(nil).UpdateAdmin), ctx, admin)
}

// UpdateAllNotFinishedTransactions mocks base method.
func (m *MockRepositorier) UpdateAllNotFinishedTransactions(ctx context.Context, eventID uint, eventType models.EventType, newStatus models.TransactionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllNotFinishedTransactions", ctx, eventID, eventType, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllNotFinishedTransactions indicates an expected call of UpdateAllNotFinishedTransactions.
func (mr *MockRepositorierMockRecorder) UpdateAllNotFinishedTransactions(ctx, eventID, eventType, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllNotFinishedTransactions", reflect.TypeOf((*MockRepositorier)(nil).UpdateAllNotFinishedTransactions), ctx, eventID, eventType, newStatus)
}

// UpdateComment mocks base method.
func (m *MockRepositorier) UpdateComment(ctx context.Context, id uint, toUpdate map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, id, toUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockRepositorierMockRecorder) UpdateComment(ctx, id, toUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockRepositorier)(nil).UpdateComment), ctx, id, toUpdate)
}

// UpdateEvent mocks base method.
func (m *MockRepositorier) UpdateEvent(ctx context.Context, event models.ProposalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockRepositorierMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockRepositorier)(nil).UpdateEvent), ctx, event)
}

// UpdateHelpEvent mocks base method.
func (m *MockRepositorier) UpdateHelpEvent(ctx context.Context, event models.HelpEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHelpEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHelpEvent indicates an expected call of UpdateHelpEvent.
func (mr *MockRepositorierMockRecorder) UpdateHelpEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHelpEvent", reflect.TypeOf((*MockRepositorier)(nil).UpdateHelpEvent), ctx, event)
}

// UpdateNeeds mocks base method.
func (m *MockRepositorier) UpdateNeeds(ctx context.Context, needs ...models.Need) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range needs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNeeds", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNeeds indicates an expected call of UpdateNeeds.
func (mr *MockRepositorierMockRecorder) UpdateNeeds(ctx interface{}, needs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, needs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNeeds", reflect.TypeOf((*MockRepositorier)(nil).UpdateNeeds), varargs...)
}

// UpdateRemainingHelps mocks base method.
func (m *MockRepositorier) UpdateRemainingHelps(ctx context.Context, eventID models.ID, increase bool, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemainingHelps", ctx, eventID, increase, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemainingHelps indicates an expected call of UpdateRemainingHelps.
func (mr *MockRepositorierMockRecorder) UpdateRemainingHelps(ctx, eventID, increase, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemainingHelps", reflect.TypeOf((*MockRepositorier)(nil).UpdateRemainingHelps), ctx, eventID, increase, number)
}

// UpdateTransactionByEvent mocks base method.
func (m *MockRepositorier) UpdateTransactionByEvent(ctx context.Context, eventID uint, eventType models.EventType, toUpdate map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByEvent", ctx, eventID, eventType, toUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionByEvent indicates an expected call of UpdateTransactionByEvent.
func (mr *MockRepositorierMockRecorder) UpdateTransactionByEvent(ctx, eventID, eventType, toUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByEvent", reflect.TypeOf((*MockRepositorier)(nil).UpdateTransactionByEvent), ctx, eventID, eventType, toUpdate)
}

// UpdateTransactionByID mocks base method.
func (m *MockRepositorier) UpdateTransactionByID(ctx context.Context, id uint, toUpdate map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByID", ctx, id, toUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionByID indicates an expected call of UpdateTransactionByID.
func (mr *MockRepositorierMockRecorder) UpdateTransactionByID(ctx, id, toUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByID", reflect.TypeOf((*MockRepositorier)(nil).UpdateTransactionByID), ctx, id, toUpdate)
}

// UpdateUserByEmail mocks base method.
func (m *MockRepositorier) UpdateUserByEmail(ctx context.Context, email string, values map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByEmail", ctx, email, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByEmail indicates an expected call of UpdateUserByEmail.
func (mr *MockRepositorierMockRecorder) UpdateUserByEmail(ctx, email, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByEmail", reflect.TypeOf((*MockRepositorier)(nil).UpdateUserByEmail), ctx, email, values)
}

// Upload mocks base method.
func (m *MockRepositorier) Upload(ctx context.Context, fileName string, fileData io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, fileName, fileData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockRepositorierMockRecorder) Upload(ctx, fileName, fileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockRepositorier)(nil).Upload), ctx, fileName, fileData)
}

// UpsertTags mocks base method.
func (m *MockRepositorier) UpsertTags(ctx context.Context, eventType models.EventType, eventID uint, tags []models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTags", ctx, eventType, eventID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTags indicates an expected call of UpsertTags.
func (mr *MockRepositorierMockRecorder) UpsertTags(ctx, eventType, eventID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTags", reflect.TypeOf((*MockRepositorier)(nil).UpsertTags), ctx, eventType, eventID, tags)
}

// UpsertUser mocks base method.
func (m *MockRepositorier) UpsertUser(ctx context.Context, values map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", ctx, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockRepositorierMockRecorder) UpsertUser(ctx, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockRepositorier)(nil).UpsertUser), ctx, values)
}

// UpsertUserTags mocks base method.
func (m *MockRepositorier) UpsertUserTags(ctx context.Context, userID uint, searchValues []models.MemberSearch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserTags", ctx, userID, searchValues)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUserTags indicates an expected call of UpsertUserTags.
func (mr *MockRepositorierMockRecorder) UpsertUserTags(ctx, userID, searchValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserTags", reflect.TypeOf((*MockRepositorier)(nil).UpsertUserTags), ctx, userID, searchValues)
}

// WriteComment mocks base method.
func (m *MockRepositorier) WriteComment(ctx context.Context, comment models.Comment) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteComment", ctx, comment)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteComment indicates an expected call of WriteComment.
func (mr *MockRepositorierMockRecorder) WriteComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteComment", reflect.TypeOf((*MockRepositorier)(nil).WriteComment), ctx, comment)
}

// MockHelpEventer is a mock of HelpEventer interface.
type MockHelpEventer struct {
	ctrl     *gomock.Controller
	recorder *MockHelpEventerMockRecorder
}

// MockHelpEventerMockRecorder is the mock recorder for MockHelpEventer.
type MockHelpEventerMockRecorder struct {
	mock *MockHelpEventer
}

// NewMockHelpEventer creates a new mock instance.
func NewMockHelpEventer(ctrl *gomock.Controller) *MockHelpEventer {
	mock := &MockHelpEventer{ctrl: ctrl}
	mock.recorder = &MockHelpEventerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelpEventer) EXPECT() *MockHelpEventerMockRecorder {
	return m.recorder
}

// CreateHelpEvent mocks base method.
func (m *MockHelpEventer) CreateHelpEvent(ctx context.Context, event *models.HelpEvent) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHelpEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHelpEvent indicates an expected call of CreateHelpEvent.
func (mr *MockHelpEventerMockRecorder) CreateHelpEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHelpEvent", reflect.TypeOf((*MockHelpEventer)(nil).CreateHelpEvent), ctx, event)
}

// CreateRequest mocks base method.
func (m *MockHelpEventer) CreateRequest(ctx context.Context, userID models.ID, transactionInfo models.TransactionAcceptCreateRequest) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, userID, transactionInfo)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockHelpEventerMockRecorder) CreateRequest(ctx, userID, transactionInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockHelpEventer)(nil).CreateRequest), ctx, userID, transactionInfo)
}

// GetHelpEventByID mocks base method.
func (m *MockHelpEventer) GetHelpEventByID(ctx context.Context, id models.ID) (models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventByID", ctx, id)
	ret0, _ := ret[0].(models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventByID indicates an expected call of GetHelpEventByID.
func (mr *MockHelpEventerMockRecorder) GetHelpEventByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventByID", reflect.TypeOf((*MockHelpEventer)(nil).GetHelpEventByID), ctx, id)
}

// GetHelpEventBySearch mocks base method.
func (m *MockHelpEventer) GetHelpEventBySearch(ctx context.Context, search models.HelpSearchInternal) (models.HelpEventPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventBySearch", ctx, search)
	ret0, _ := ret[0].(models.HelpEventPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventBySearch indicates an expected call of GetHelpEventBySearch.
func (mr *MockHelpEventerMockRecorder) GetHelpEventBySearch(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventBySearch", reflect.TypeOf((*MockHelpEventer)(nil).GetHelpEventBySearch), ctx, search)
}

// GetHelpEventByTransactionID mocks base method.
func (m *MockHelpEventer) GetHelpEventByTransactionID(ctx context.Context, transactionID models.ID) (models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpEventByTransactionID", ctx, transactionID)
	ret0, _ := ret[0].(models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpEventByTransactionID indicates an expected call of GetHelpEventByTransactionID.
func (mr *MockHelpEventerMockRecorder) GetHelpEventByTransactionID(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpEventByTransactionID", reflect.TypeOf((*MockHelpEventer)(nil).GetHelpEventByTransactionID), ctx, transactionID)
}

// GetStatistics mocks base method.
func (m *MockHelpEventer) GetStatistics(ctx context.Context, fromStart int, creatorID uint) (models.HelpEventStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx, fromStart, creatorID)
	ret0, _ := ret[0].(models.HelpEventStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockHelpEventerMockRecorder) GetStatistics(ctx, fromStart, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockHelpEventer)(nil).GetStatistics), ctx, fromStart, creatorID)
}

// GetUserHelpEvents mocks base method.
func (m *MockHelpEventer) GetUserHelpEvents(ctx context.Context, userID models.ID) ([]models.HelpEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHelpEvents", ctx, userID)
	ret0, _ := ret[0].([]models.HelpEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHelpEvents indicates an expected call of GetUserHelpEvents.
func (mr *MockHelpEventerMockRecorder) GetUserHelpEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHelpEvents", reflect.TypeOf((*MockHelpEventer)(nil).GetUserHelpEvents), ctx, userID)
}

// UpdateEvent mocks base method.
func (m *MockHelpEventer) UpdateEvent(ctx context.Context, event models.HelpEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockHelpEventerMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockHelpEventer)(nil).UpdateEvent), ctx, event)
}

// UpdateTransactionStatus mocks base method.
func (m *MockHelpEventer) UpdateTransactionStatus(ctx context.Context, transaction models.HelpEventTransaction, file io.Reader, fileType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, transaction, file, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockHelpEventerMockRecorder) UpdateTransactionStatus(ctx, transaction, file, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockHelpEventer)(nil).UpdateTransactionStatus), ctx, transaction, file, fileType)
}

// MockProposalEventer is a mock of ProposalEventer interface.
type MockProposalEventer struct {
	ctrl     *gomock.Controller
	recorder *MockProposalEventerMockRecorder
}

// MockProposalEventerMockRecorder is the mock recorder for MockProposalEventer.
type MockProposalEventerMockRecorder struct {
	mock *MockProposalEventer
}

// NewMockProposalEventer creates a new mock instance.
func NewMockProposalEventer(ctrl *gomock.Controller) *MockProposalEventer {
	mock := &MockProposalEventer{ctrl: ctrl}
	mock.recorder = &MockProposalEventerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalEventer) EXPECT() *MockProposalEventerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockProposalEventer) Accept(ctx context.Context, request models.AcceptRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockProposalEventerMockRecorder) Accept(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockProposalEventer)(nil).Accept), ctx, request)
}

// CreateEvent mocks base method.
func (m *MockProposalEventer) CreateEvent(ctx context.Context, event models.ProposalEvent) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, event)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockProposalEventerMockRecorder) CreateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockProposalEventer)(nil).CreateEvent), ctx, event)
}

// DeleteEvent mocks base method.
func (m *MockProposalEventer) DeleteEvent(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockProposalEventerMockRecorder) DeleteEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockProposalEventer)(nil).DeleteEvent), ctx, id)
}

// GetEvent mocks base method.
func (m *MockProposalEventer) GetEvent(ctx context.Context, id uint) (models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, id)
	ret0, _ := ret[0].(models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockProposalEventerMockRecorder) GetEvent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockProposalEventer)(nil).GetEvent), ctx, id)
}

// GetEvents mocks base method.
func (m *MockProposalEventer) GetEvents(ctx context.Context) ([]models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx)
	ret0, _ := ret[0].([]models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockProposalEventerMockRecorder) GetEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockProposalEventer)(nil).GetEvents), ctx)
}

// GetProposalEventBySearch mocks base method.
func (m *MockProposalEventer) GetProposalEventBySearch(ctx context.Context, search models.ProposalEventSearchInternal) (models.ProposalEventPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposalEventBySearch", ctx, search)
	ret0, _ := ret[0].(models.ProposalEventPagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposalEventBySearch indicates an expected call of GetProposalEventBySearch.
func (mr *MockProposalEventerMockRecorder) GetProposalEventBySearch(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposalEventBySearch", reflect.TypeOf((*MockProposalEventer)(nil).GetProposalEventBySearch), ctx, search)
}

// GetStatistics mocks base method.
func (m *MockProposalEventer) GetStatistics(ctx context.Context, fromStart int, creatorID uint) (models.ProposalEventStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx, fromStart, creatorID)
	ret0, _ := ret[0].(models.ProposalEventStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockProposalEventerMockRecorder) GetStatistics(ctx, fromStart, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockProposalEventer)(nil).GetStatistics), ctx, fromStart, creatorID)
}

// GetUserProposalEvents mocks base method.
func (m *MockProposalEventer) GetUserProposalEvents(ctx context.Context, userID uint) ([]models.ProposalEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProposalEvents", ctx, userID)
	ret0, _ := ret[0].([]models.ProposalEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProposalEvents indicates an expected call of GetUserProposalEvents.
func (mr *MockProposalEventerMockRecorder) GetUserProposalEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProposalEvents", reflect.TypeOf((*MockProposalEventer)(nil).GetUserProposalEvents), ctx, userID)
}

// Response mocks base method.
func (m *MockProposalEventer) Response(ctx context.Context, proposalEventID, responderID uint, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response", ctx, proposalEventID, responderID, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockProposalEventerMockRecorder) Response(ctx, proposalEventID, responderID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockProposalEventer)(nil).Response), ctx, proposalEventID, responderID, comment)
}

// UpdateEvent mocks base method.
func (m *MockProposalEventer) UpdateEvent(ctx context.Context, event models.ProposalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockProposalEventerMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockProposalEventer)(nil).UpdateEvent), ctx, event)
}

// UpdateStatus mocks base method.
func (m *MockProposalEventer) UpdateStatus(ctx context.Context, status models.TransactionStatus, transactionID, userID uint, file io.Reader, fileType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, status, transactionID, userID, file, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockProposalEventerMockRecorder) UpdateStatus(ctx, status, transactionID, userID, file, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockProposalEventer)(nil).UpdateStatus), ctx, status, transactionID, userID, file, fileType)
}

// MockAdminCRUDer is a mock of AdminCRUDer interface.
type MockAdminCRUDer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminCRUDerMockRecorder
}

// MockAdminCRUDerMockRecorder is the mock recorder for MockAdminCRUDer.
type MockAdminCRUDerMockRecorder struct {
	mock *MockAdminCRUDer
}

// NewMockAdminCRUDer creates a new mock instance.
func NewMockAdminCRUDer(ctrl *gomock.Controller) *MockAdminCRUDer {
	mock := &MockAdminCRUDer{ctrl: ctrl}
	mock.recorder = &MockAdminCRUDerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminCRUDer) EXPECT() *MockAdminCRUDerMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockAdminCRUDer) CreateAdmin(ctx context.Context, admin models.User) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, admin)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminCRUDerMockRecorder) CreateAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminCRUDer)(nil).CreateAdmin), ctx, admin)
}

// DeleteAdmin mocks base method.
func (m *MockAdminCRUDer) DeleteAdmin(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockAdminCRUDerMockRecorder) DeleteAdmin(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockAdminCRUDer)(nil).DeleteAdmin), ctx, id)
}

// GetAdminByID mocks base method.
func (m *MockAdminCRUDer) GetAdminByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByID indicates an expected call of GetAdminByID.
func (mr *MockAdminCRUDerMockRecorder) GetAdminByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByID", reflect.TypeOf((*MockAdminCRUDer)(nil).GetAdminByID), ctx, id)
}

// GetAllAdmins mocks base method.
func (m *MockAdminCRUDer) GetAllAdmins(ctx context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", ctx)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockAdminCRUDerMockRecorder) GetAllAdmins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockAdminCRUDer)(nil).GetAllAdmins), ctx)
}

// UpdateAdmin mocks base method.
func (m *MockAdminCRUDer) UpdateAdmin(ctx context.Context, admin models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", ctx, admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockAdminCRUDerMockRecorder) UpdateAdmin(ctx, admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockAdminCRUDer)(nil).UpdateAdmin), ctx, admin)
}

// MockTransactioner is a mock of Transactioner interface.
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner.
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance.
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactioner) CreateTransaction(ctx context.Context, transaction models.Transaction) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionerMockRecorder) CreateTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactioner)(nil).CreateTransaction), ctx, transaction)
}

// GetAllEventTransactions mocks base method.
func (m *MockTransactioner) GetAllEventTransactions(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEventTransactions", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEventTransactions indicates an expected call of GetAllEventTransactions.
func (mr *MockTransactionerMockRecorder) GetAllEventTransactions(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEventTransactions", reflect.TypeOf((*MockTransactioner)(nil).GetAllEventTransactions), ctx, eventID, eventType)
}

// GetCurrentEventTransactions mocks base method.
func (m *MockTransactioner) GetCurrentEventTransactions(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEventTransactions", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEventTransactions indicates an expected call of GetCurrentEventTransactions.
func (mr *MockTransactionerMockRecorder) GetCurrentEventTransactions(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEventTransactions", reflect.TypeOf((*MockTransactioner)(nil).GetCurrentEventTransactions), ctx, eventID, eventType)
}

// GetTransactionByID mocks base method.
func (m *MockTransactioner) GetTransactionByID(ctx context.Context, id uint) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, id)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionerMockRecorder) GetTransactionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactioner)(nil).GetTransactionByID), ctx, id)
}

// UpdateAllNotFinishedTransactions mocks base method.
func (m *MockTransactioner) UpdateAllNotFinishedTransactions(ctx context.Context, eventID uint, eventType models.EventType, newStatus models.TransactionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllNotFinishedTransactions", ctx, eventID, eventType, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllNotFinishedTransactions indicates an expected call of UpdateAllNotFinishedTransactions.
func (mr *MockTransactionerMockRecorder) UpdateAllNotFinishedTransactions(ctx, eventID, eventType, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllNotFinishedTransactions", reflect.TypeOf((*MockTransactioner)(nil).UpdateAllNotFinishedTransactions), ctx, eventID, eventType, newStatus)
}

// UpdateTransaction mocks base method.
func (m *MockTransactioner) UpdateTransaction(ctx context.Context, transaction models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionerMockRecorder) UpdateTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactioner)(nil).UpdateTransaction), ctx, transaction)
}

// MockCommenter is a mock of Commenter interface.
type MockCommenter struct {
	ctrl     *gomock.Controller
	recorder *MockCommenterMockRecorder
}

// MockCommenterMockRecorder is the mock recorder for MockCommenter.
type MockCommenterMockRecorder struct {
	mock *MockCommenter
}

// NewMockCommenter creates a new mock instance.
func NewMockCommenter(ctrl *gomock.Controller) *MockCommenter {
	mock := &MockCommenter{ctrl: ctrl}
	mock.recorder = &MockCommenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommenter) EXPECT() *MockCommenterMockRecorder {
	return m.recorder
}

// DeleteComment mocks base method.
func (m *MockCommenter) DeleteComment(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommenterMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommenter)(nil).DeleteComment), ctx, id)
}

// GetAllCommentsInEvent mocks base method.
func (m *MockCommenter) GetAllCommentsInEvent(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommentsInEvent", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCommentsInEvent indicates an expected call of GetAllCommentsInEvent.
func (mr *MockCommenterMockRecorder) GetAllCommentsInEvent(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommentsInEvent", reflect.TypeOf((*MockCommenter)(nil).GetAllCommentsInEvent), ctx, eventID, eventType)
}

// GetCommentByID mocks base method.
func (m *MockCommenter) GetCommentByID(ctx context.Context, id uint) (models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, id)
	ret0, _ := ret[0].(models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommenterMockRecorder) GetCommentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommenter)(nil).GetCommentByID), ctx, id)
}

// UpdateComment mocks base method.
func (m *MockCommenter) UpdateComment(ctx context.Context, comment models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommenterMockRecorder) UpdateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommenter)(nil).UpdateComment), ctx, comment)
}

// WriteComment mocks base method.
func (m *MockCommenter) WriteComment(ctx context.Context, comment models.Comment) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteComment", ctx, comment)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteComment indicates an expected call of WriteComment.
func (mr *MockCommenterMockRecorder) WriteComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteComment", reflect.TypeOf((*MockCommenter)(nil).WriteComment), ctx, comment)
}

// MockTagger is a mock of Tagger interface.
type MockTagger struct {
	ctrl     *gomock.Controller
	recorder *MockTaggerMockRecorder
}

// MockTaggerMockRecorder is the mock recorder for MockTagger.
type MockTaggerMockRecorder struct {
	mock *MockTagger
}

// NewMockTagger creates a new mock instance.
func NewMockTagger(ctrl *gomock.Controller) *MockTagger {
	mock := &MockTagger{ctrl: ctrl}
	mock.recorder = &MockTaggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagger) EXPECT() *MockTaggerMockRecorder {
	return m.recorder
}

// GetTagsByEvent mocks base method.
func (m *MockTagger) GetTagsByEvent(ctx context.Context, eventID uint, eventType models.EventType) ([]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsByEvent", ctx, eventID, eventType)
	ret0, _ := ret[0].([]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsByEvent indicates an expected call of GetTagsByEvent.
func (mr *MockTaggerMockRecorder) GetTagsByEvent(ctx, eventID, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsByEvent", reflect.TypeOf((*MockTagger)(nil).GetTagsByEvent), ctx, eventID, eventType)
}

// UpsertTags mocks base method.
func (m *MockTagger) UpsertTags(ctx context.Context, eventID uint, eventType models.EventType, tags []models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTags", ctx, eventID, eventType, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTags indicates an expected call of UpsertTags.
func (mr *MockTaggerMockRecorder) UpsertTags(ctx, eventID, eventType, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTags", reflect.TypeOf((*MockTagger)(nil).UpsertTags), ctx, eventID, eventType, tags)
}

// MockUserSearcher is a mock of UserSearcher interface.
type MockUserSearcher struct {
	ctrl     *gomock.Controller
	recorder *MockUserSearcherMockRecorder
}

// MockUserSearcherMockRecorder is the mock recorder for MockUserSearcher.
type MockUserSearcherMockRecorder struct {
	mock *MockUserSearcher
}

// NewMockUserSearcher creates a new mock instance.
func NewMockUserSearcher(ctrl *gomock.Controller) *MockUserSearcher {
	mock := &MockUserSearcher{ctrl: ctrl}
	mock.recorder = &MockUserSearcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSearcher) EXPECT() *MockUserSearcherMockRecorder {
	return m.recorder
}

// UpsertValues mocks base method.
func (m *MockUserSearcher) UpsertValues(ctx context.Context, userId uint, tags []models.MemberSearch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertValues", ctx, userId, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertValues indicates an expected call of UpsertValues.
func (mr *MockUserSearcherMockRecorder) UpsertValues(ctx, userId, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertValues", reflect.TypeOf((*MockUserSearcher)(nil).UpsertValues), ctx, userId, tags)
}

// MockTransactionNotifier is a mock of TransactionNotifier interface.
type MockTransactionNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionNotifierMockRecorder
}

// MockTransactionNotifierMockRecorder is the mock recorder for MockTransactionNotifier.
type MockTransactionNotifierMockRecorder struct {
	mock *MockTransactionNotifier
}

// NewMockTransactionNotifier creates a new mock instance.
func NewMockTransactionNotifier(ctrl *gomock.Controller) *MockTransactionNotifier {
	mock := &MockTransactionNotifier{ctrl: ctrl}
	mock.recorder = &MockTransactionNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionNotifier) EXPECT() *MockTransactionNotifierMockRecorder {
	return m.recorder
}

// GetUserNotifications mocks base method.
func (m *MockTransactionNotifier) GetUserNotifications(ctx context.Context, userID uint) ([]models.TransactionNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotifications", ctx, userID)
	ret0, _ := ret[0].([]models.TransactionNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifications indicates an expected call of GetUserNotifications.
func (mr *MockTransactionNotifierMockRecorder) GetUserNotifications(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifications", reflect.TypeOf((*MockTransactionNotifier)(nil).GetUserNotifications), ctx, userID)
}

// Read mocks base method.
func (m *MockTransactionNotifier) Read(ctx context.Context, id []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTransactionNotifierMockRecorder) Read(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransactionNotifier)(nil).Read), ctx, id)
}
